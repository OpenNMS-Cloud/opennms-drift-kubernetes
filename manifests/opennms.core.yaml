# @author Alejandro Galue <agalue@opennms.org>
#
# WARNING:
# - This deployment will have a persistent volume for /opt/opennms/etc to track the configuration changes.
# - The opennms process runs as root, which is not allowed on OpenShift
# - The default images are based on OpenJDK, but Oracle JDK is recommended for production.
#   Oracle JDK based images are available at no42org. For example: no42org/horizon:23.0.2
# - The image opennms/horizon-core-web:bleeding refers to the upcoming version of OpenNMS (unstable)
#
# TODO:
# - Potential tools for managing /opt/opennms/etc:
#   https://vapor-ware.github.io/ksync/
#   https://github.com//kubernetes/git-sync

---
apiVersion: v1
kind: Service
metadata:
  name: opennms-core
  namespace: opennms
  labels:
    app: onms
    deployment: drift
spec:
  clusterIP: None
  ports:
  - port: 8980
    name: http
  - port: 8101
    name: karaf
  selector:
    app: onms

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: onms
  namespace: opennms
  labels:
    app: onms
    deployment: drift
spec:
  serviceName: opennms-core
  replicas: 1 # The solution only allows 1 instance
  selector:
    matchLabels:
      app: onms
  template:
    metadata:
      labels:
        app: onms
        deployment: drift
    spec:
      terminationGracePeriodSeconds: 300
      initContainers:
      - name: dependencies
        image: waisbrot/wait
        imagePullPolicy: IfNotPresent
        env:
        - name: TARGETS
          value: postgresql.opennms.svc.cluster.local:5432,cassandra.opennms.svc.cluster.local:9042,kafka.opennms.svc.cluster.local:9092,esdata.opennms.svc.cluster.local:9200
        - name: TIMEOUT
          value: '600'
      - name: init-config
        image: opennms/horizon-core-web:bleeding # Experimental version, do not use in production
        imagePullPolicy: IfNotPresent
        command: [ bash, /init.sh ]
        env:
        - name: INSTANCE_ID
          value: OpenNMS
        - name: FEATURES_LIST
          value: opennms-es-rest,opennms-kafka-producer
        - name: KAFKA_SERVER
          value: kafka.opennms.svc.cluster.local
        - name: ELASTIC_SERVER
          value: esdata.opennms.svc.cluster.local
        - name: CASSANDRA_SERVER
          value: cassandra.opennms.svc.cluster.local
        - name: CASSANDRA_REPFACTOR
          value: '2'
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ELASTICSEARCH
              name: onms-passwords
        volumeMounts:
        - name: opennms-etc
          mountPath: /opennms-etc
        - name: opennms-config
          mountPath: /init.sh
          subPath: onms-core-init.sh
      - name: init-newts
        image: cassandra:3.11.3
        imagePullPolicy: IfNotPresent
        command: [ sh, -c, 'cqlsh -f /opennms-etc/newts.cql $CASSANDRA_HOST' ]
        env:
        - name: CASSANDRA_HOST
          value: cassandra.opennms.svc.cluster.local
        volumeMounts:
        - name: opennms-etc
          mountPath: /opennms-etc
      containers:
      - name: onms
        image: opennms/horizon-core-web:bleeding # Experimental version, do not use in production
        imagePullPolicy: IfNotPresent
        args:
        - -s
        ports:
        - containerPort: 8101
          name: karaf
        - containerPort: 8980
          name: http
        env:
        - name: MEM_TOTAL_MB
          valueFrom:
            resourceFieldRef:
              resource: requests.memory
              divisor: 1Mi
        - name: JAVA_OPTS # Preferred way instead of opennms.conf
          value: -XX:+UseG1GC -Xms$(MEM_TOTAL_MB)m -Xmx$(MEM_TOTAL_MB)m -XX:+PrintFlagsFinal
#       - name: JAVA_OPTS # This doesn't seem to work apparently due to Java 8
#         value: -XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+PrintFlagsFinal
        - name: POSTGRES_HOST
          value: postgresql.opennms.svc.cluster.local
        - name: POSTGRES_PORT
          value: '5432'
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES
              name: onms-passwords
        - name: OPENNMS_DBNAME
          value: opennms
        - name: OPENNMS_DBUSER
          value: opennms
        - name: OPENNMS_DBPASS
          valueFrom:
            secretKeyRef:
              key: OPENNMS_DB
              name: onms-passwords
        volumeMounts:
        - name: opennms-etc
          mountPath: /opt/opennms/etc
        resources:
          limits:
            cpu: 4
            memory: 6Gi
          requests:
            cpu: 4
            memory: 4Gi
        lifecycle:
          preStop:
            exec:
              command: [ bash, -c, /opt/opennms/bin/opennms stop ]
        readinessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          initialDelaySeconds: 120
          periodSeconds: 60
      volumes:
      - name: opennms-config
        configMap:
          name: opennms-config
  volumeClaimTemplates:
  - metadata:
      name: opennms-etc
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: ssd
      resources:
        requests:
          storage: 1Gi # Cannnot be less than that in AWS for an EBS Volume

# @author Alejandro Galue <agalue@opennms.org>
#
# This deployment will have a persistent volume for /opt/opennms/etc to track the configuration changes.
# It will also use an overlay directory through config-maps for the critical configuration files that should
# always be overriden, regardless the content of /opt/opennms/etc every time the Pod runs.
#
# WARNING: the opennms process runs as root, which is not allowed on OpenShift
#
# ENHANCEMENTS
# - Use a tool like ksync for /opt/opennms/etc:
#   https://vapor-ware.github.io/ksync/
# - Use an init-container to either pre-populate the mandatory config through config-maps or through a script
#   that uses environment variables, to avoid the need of the overlay directory.

---
apiVersion: v1
kind: Service
metadata:
  name: opennms-core
  namespace: opennms
  labels:
    app: onms
    deployment: drift
spec:
  clusterIP: None
  ports:
  - port: 8980
    name: http
  - port: 8101
    name: karaf
  selector:
    app: onms

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: onms
  namespace: opennms
  labels:
    app: onms
    deployment: drift
spec:
  serviceName: opennms-core
  replicas: 1 # The solution only allows 1 instance
  selector:
    matchLabels:
      app: onms
  template:
    metadata:
      labels:
        app: onms
        deployment: drift
    spec:
      terminationGracePeriodSeconds: 300
      initContainers:
      - name: wait-for-dependencies
        image: waisbrot/wait
        imagePullPolicy: IfNotPresent
        env:
        - name: TARGETS
          value: postgresql.opennms.svc.cluster.local:5432,cassandra.opennms.svc.cluster.local:9042,kafka.opennms.svc.cluster.local:9092,esdata.opennms.svc.cluster.local:9200
        - name: TIMEOUT
          value: '600'
      - name: config-initialization
        image: opennms/horizon-core-web:bleeding
        imagePullPolicy: IfNotPresent
        command: [ sh, -c, 'if [ ! -f /opennms-config/configured ]; then cp -R /opt/opennms/etc/* /opennms-config/; fi' ]
        volumeMounts:
        - name: opennms-config
          mountPath: /opennms-config
      - name: karaf-features-initialization
        image: opennms/horizon-core-web:bleeding
        imagePullPolicy: IfNotPresent
        command: [ sh, /karaf-features.init.sh ]
        env:
        - name: FEATURES_CFG
          value: /opennms-config/org.apache.karaf.features.cfg
        - name: FEATURES_LIST
          value: opennms-es-rest,opennms-kafka-producer
        volumeMounts:
        - name: opennms-config
          mountPath: /opennms-config
        - name: onms-etc
          mountPath: /karaf-features.init.sh
          subPath: karaf-features.init.sh
      - name: newts-initialization
        image: cassandra:3.11.3
        imagePullPolicy: IfNotPresent
        command: [ sh, -c, 'cqlsh -f /newts.cql $CASSANDRA_HOST' ]
        env:
        - name: CASSANDRA_HOST
          value: cassandra.opennms.svc.cluster.local
        volumeMounts:
        - name:  onms-etc
          mountPath: /newts.cql
          subPath: newts.cql
      containers:
      - name: onms
        image: opennms/horizon-core-web:bleeding
        imagePullPolicy: IfNotPresent
        command: [ /docker-entrypoint.sh, -s ]
        ports:
        - containerPort: 8101
          name: karaf
        - containerPort: 8980
          name: http
        env:
        - name: JAVA_OPTS
          value: -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
        - name: POSTGRES_HOST
          value: postgresql.opennms.svc.cluster.local
        - name: POSTGRES_PORT
          value: '5432'
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: OPENNMS_DBNAME
          value: opennms
        - name: OPENNMS_DBUSER
          value: opennms
        - name: OPENNMS_DBPASS
          value: opennms
        volumeMounts:
        - name: opennms-config
          mountPath: /opt/opennms/etc
        - name: onms-etc
          mountPath: /opt/opennms-etc-overlay/org.opennms.features.datachoices.cfg
          subPath: org.opennms.features.datachoices.cfg
        - name: onms-etc
          mountPath: /opt/opennms-etc-overlay/org.opennms.plugin.elasticsearch.rest.forwarder.cfg
          subPath: org.opennms.plugin.elasticsearch.rest.forwarder.cfg
        - name: onms-etc
          mountPath: /opt/opennms-etc-overlay/org.opennms.features.kafka.producer.client.cfg
          subPath: org.opennms.features.kafka.producer.client.cfg
        - name: onms-etc
          mountPath: /opt/opennms-etc-overlay/org.opennms.features.kafka.producer.cfg
          subPath: org.opennms.features.kafka.producer.cfg
        - name: onms-etc
          mountPath: /opt/opennms-etc-overlay/opennms.properties.d/newts.properties
          subPath: newts.properties
        - name: onms-etc
          mountPath: /opt/opennms-etc-overlay/opennms.properties.d/kafka.properties
          subPath: kafka.properties
        resources:
          limits:
            cpu: 4
            memory: 8Gi
          requests:
            cpu: 2
            memory: 4Gi
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/opennms/bin/opennms stop
        readinessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          initialDelaySeconds: 120
          periodSeconds: 60
      volumes:
      - name: onms-etc
        configMap:
          name: opennms-core-overlay
  volumeClaimTemplates:
  - metadata:
      name: opennms-config
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: aws-ebs
      resources:
        requests:
          storage: 1Gi # Cannnot be less than that in AWS for an EBS Volume
